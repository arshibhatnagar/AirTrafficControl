CS 5412 Architecture Considerations:
  Tier 1:
    -> Implement as a microservice
    -> Explore implementing batch APIs for CRUD (Not easy to do)
    -> Use asynchronous requests to communicate with other microservices using urlfetch or tasklets
    -> Bundle writes to Datastore (this is key)
    -> Try using memcache somehow - come up with a caching strategy
    -> Need excellent response time - think about instance managing strategies
    -> Route requests to instances to load balance (to mimic region ATCs)

  Datastore:
    -> Provides scalability and durability by distributing data over many machines and using masterless, synchronous replication over a wide geographic area
    -> Tradeoff is that the write throughput for any single entity group is one commit per second
    -> Have to decide what the entities and kinds are going to be.
    -> Need to figure out consistency requirements. Datastore queries can be configured to have strong consistencies or be eventually consistent.
    -> Need to figure out to use transactions or not

  Tier 2:
    -> Implement as a microservice
    -> Reads in flight plans and current flight locations from Datastore every 10 minutes
    -> Calculates next waypoint for all flights
    -> Stores that data back into Datastore, and some cache (figure out optimal caching policy)
    -> Asynchronously calls on other micro services to help with this calculation
    -> Use cron jobs to schedule the calculation job every 10 minutes or so

Questions for Ken:
  -> Is it okay to use automated features, and deal with the constraints that they bring along?
  -> Do we use a model where we have some instances dedicated to an area or no?
  -> Any other resources we could look at for architecture inspiration?
  -> Can we assume that the response sent to the flight includes a key to be used with the application?
  -> How can we push updates from all instances in one-second intervals? Can we use a global queue with locking?
